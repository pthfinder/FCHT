# == Structure ==

# name_of_activity = {

# 	expiration_days = X 			# default number of days after an activity is started to it's expiration
# 	days_until_auto_start = X 		# number of days from an activity is spawned until it's started (regardless of if participants have arrived or not)
# 	valid = trigger					# checked daily on the activity scope
# 	on_spawn = effect 				# executed on the activity when spawned
# 	on_activate = effect			# executed on the activity when started (all invitations replied to or auto started)
# 	on_complete = effect			# executed on the activity when completed through complete_activity = yes (ignored if complete_activity = no)
# 	on_expire = effect				# executed on the activity when expiring from timeout
# 	on_participant_death			# executed on the dying character during death, activity set as scope:activity
# 	on_invalidated = effect			# executed on the activity when failing the valid trigger
	
# 	solo = yes						# marks the activity as a solo activity (no guests)
# 	has_activity_window = yes		# determines if a certain activity should show a window or not
# }


tournament = {
	solo = no
	has_activity_window = yes
	expiration_days = 183 # Obviously tournaments did not last half a year, gameplay decision.
	days_until_auto_start = 60 

	valid = {
		activity_owner = {
			is_alive = yes
			is_imprisoned = no
			is_at_war = no

		}
	}


	## Send an invitation to all eligible characters. Players will receive
	# a cooldown flag to make sure they dont get spammed with events
	# if they want to join other tournaments they can always interact
	# with the tournament GUI.

	on_spawn = {

		every_living_character = {
			limit  = {
				NOT = { 
					is_in_list = tournament_invite_list
				}
				is_ai = yes
				ai_consider_joining_tournament = yes
				
				realm_to_title_distance_squared = {
					title = scope:activity.activity_owner.capital_county
					value <= 125000 # Within "two Irelands" away
				}
			}
			add_to_temporary_list = tournament_invite_list
			add_character_flag = INVITED_TO_TOURNAMNET
			
		}

		
		
		every_in_list = {
			list = tournament_invite_list
			scope:activity = {
				invite_character_to_activity = prev
			}
		}

	}
	

	#on_activate =
	#on_complete remove_flag, send event
	#on_expire = remove_flag, send event
	#on_invalided = remove_flag, send event





	# on_participant_death = {
	# 	trigger_event.. triggers within that event for if the participant was murdered, 
	# died naturally, died fighting in the tournament
	# }

	}

